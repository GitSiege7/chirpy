// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
insert into refresh_tokens (token, created_at, updated_at, user_id, expires_at, revoked_at)
values (
    $1,
    Now(),
    Now(),
    $2,
    Now() + interval '60 days',
    null
)
returning token, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshTokenParams struct {
	Token  string
	UserID uuid.NullUUID
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.Token, arg.UserID)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getRefreshToken = `-- name: GetRefreshToken :one
select token, created_at, updated_at, user_id, expires_at, revoked_at from refresh_tokens
where refresh_tokens.token = $1
`

func (q *Queries) GetRefreshToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
select refresh_tokens.user_id from refresh_tokens
where refresh_tokens.token = $1
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (uuid.NullUUID, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var user_id uuid.NullUUID
	err := row.Scan(&user_id)
	return user_id, err
}

const setRevoked = `-- name: SetRevoked :exec
update refresh_tokens
set revoked_at = Now(), updated_at = Now()
where refresh_tokens.token = $1
`

func (q *Queries) SetRevoked(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, setRevoked, token)
	return err
}
